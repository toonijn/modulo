doctype html
html
  head
    link(rel="stylesheet" href="/node_modules/reveal.js/dist/reveal.css")
    link(rel="stylesheet" href="/node_modules/highlight.js/styles/vs.css")
    link(rel="stylesheet" href="theme.scss")
  body
    .reveal
      .slides
        section.title
          h1 Building a class for modular arithmetic
          h2 Writing modern C++ is not easy.
          .author Toon Baeyens
          .contact
            a(href="https://toonijn.be/") toonijn.be
            br
            a(href="mailto:toon.baeyens@gmail.com") toon.baeyens@gmail.com
            br
            a(href="https://github.com/toonijn/modulo/") github.com/toonijn/modulo/

        section(style="background: url('img/maxwell.png') no-repeat bottom right; background-size: 1100px;")
          h1 About me
          .row
            .col
              h3 I worked at
              ul
                li think-cell (2023-2024)
                  ul
                    li C++ codebase for their PowerPoint add-in
                li Ghent University (2018-2023)
                  ul 
                    li Teaching assistant
                    li PhD in mathematics:<br />Algorithms for time-independent Schr√∂dinger equations 
            .col
              h3 I love exploring
              ul
                li numerical mathematics
                li beautiful visualizations
                li the obscure corners of C++

          div(style="position:absolute; left:20px; bottom:20px; text-align: left; font-size:80%;")
            | Toon Baeyens
            br
            a(href="mailto:toon.baeyens@gmail.com") toon.baeyens@gmail.com
        section
          h1 Why?
          img.pe-img(src="img/pe435.png" style="left: 150px; top: 250px;")
          img.pe-img(src="img/pe820.png" style="left: 1100px; top: 150px;")
          img.pe-img(src="img/pe864.png" style="left: 500px; top: 720px;")
          div(style="position:absolute; right:250px; bottom:100px; text-align: left;")
            a(href="https://projecteuler.net/") projecteuler.net
        section
          h1 Table Of Content
          h2 Building a class for modular arithmetic

          .row
            .col
              ul 
                li Known modulus
                  ul
                    li member type
                    li #[:code(inline, subtle) operator==]
                    li #[:code(inline, subtle) operator+], #[:code(inline, subtle) operator+=]
                    li #[:code(inline, subtle) operator*]
            .col
              ul 
                li Unknown modulus
                  ul
                    li dependent types
                    li selecting the type
                    li optimizations
                    li powers
          br
          h3 On the way we will touch
          .cloud
            .word operator precedence
            .word #[:code(inline, subtle) std::visit]
            .word casting integers
            .word concepts
            .word comparing integers
            .word #[:code(inline, subtle) __uint128_t]
            .word value categories
            .word argument-dependent lookup
            .word #[:code(inline, subtle) MUL], #[:code(inline, subtle) UMULH], #[:code(inline, subtle) FMUL]
            .word fixed-point arithmetic
            .word micro bechmarking
            .word dependent types
            .word
              :code(inline, subtle) [[assume(...)]]

        section
          h1 Design goals
          br
          h2 Easy to use
          .row
            .col
              h3 constexpr modulus
              :code
                using Mod = Modulo<17>;
            .col
              h3 run-time modulus
              :code
                // Something magical to get a Mod type
          h3 Usage
          :code
            auto a = Mod(3);
            a -= 2;
            auto b = 3 + a * 7
            a += a * b;
            if(a == b) {
              // ...
            }
        section
          h1 Design goals
          br
          br
          br
          br
          .row
            .col
              h2 Goals
              ul
                li Correctness
                li Easy to use
                li Performance
            .col
              h2 Non-goals
              ul
                li Easy to understand
                li Mathematical optimizations
                li Perfection
        section
          h1 Known modulus, first design
          include:code code/ct_naive.cpp
          .img.fragment(style="background: white; padding: 10px")
            include code/precedence.pug
        section
          h1 General datatype
          :code
            template<[...] modulus>
            struct Modulo {
              using ValueType = [...];
              ValueType value;
            }
          ul
            li What should #[:code(inline, subtle) ValueType] be?
              ul
                li Signedness?
                li #[:code(inline, subtle) value] needs to fit.
                  ul
                    li Does #[:code(inline, subtle) modulus] need to fit?
                    li Does #[:code(inline, subtle) value + value] need to fit?
                    li Does #[:code(inline, subtle) value * value] need to fit?
                li Do we care for #[:code(inline, subtle) __uint128]?
        section
          h1 General datatype
          include:code(compile="ct-datatype-output") code/ct_datatype.cpp
          .compiler-output
            pre#ct-datatype-output

          .fragment.img(style="padding: 30px; bottom: auto; top: 60px;")
            h2 Trade-offs

            ul
              li Storage
              li Caching 
              li Arithmetic speed
              li Vectorization
              li Unaligned loads
              li Even larger moduli
            p Run benchmarks!
        section
          h1 The constructor

          h2 Let's review!
          :code
            template<std::uint64_t modulus_>
            struct Modulo {
              using ValueType = [...];
              ValueType value;

              template<typename V>
              Modulo(V raw_value)
                : value(raw_value % modulus_) {}
            }
          .fragment
            ul
              li Should we avoid the implicit one-argument constructor?
              li What about the copy and move constructor?
              li Are the arithmetic conversions correct in #[i all] cases?
        section
          h1 The constructor
          include:code code/ct_constructor.cpp
          p Since C++20:
          ul
            li Two's complement
            li #[:code(inline, subtle) std::integral]
            li #[:code(inline, subtle) std::cmp_less]
        section
          h1 Operator overloading
          .row
            .col
              :code
                using Mod = Modulo<17>;
                Mod a{7};
            .col
              :code
                Mod a{7};
                a += 3;
                a *= -a;
            .col
              :code
                Mod a{7};
                Mod b{4};
                auto c = b - (a + 3) * 7;
          .row
            .col
              ul
                li Which operators?
                  ul
                    li #[:code(inline, subtle) operator+], #[:code(inline, subtle) operator-], #[:code(inline, subtle) operator*], #[:code(inline, subtle) operator/]
                    li #[:code(inline, subtle) operator+=], #[:code(inline, subtle) operator-=], #[:code(inline, subtle) operator*=], #[:code(inline, subtle) operator/=]
                    li #[:code(inline, subtle) operator+()], #[:code(inline, subtle) operator-()]
                    li #[:code(inline, subtle) operator++()], #[:code(inline, subtle) operator--()], #[:code(inline, subtle) operator++(int)], #[:code(inline, subtle) operator--(int)]
                    li #[:code(inline, subtle) operator&lt;=&gt;], #[:code(inline, subtle) operator==]
            .col
              ul
                li What about assignment operators?
                li What about conversion operators?
                  ul
                    li #[:code(inline, subtle) operator int()]
                    li #[:code(inline, subtle) operator bool()]
                li Can we reuse code between e.g. #[:code(inline, subtle) operator+] and #[:code(inline, subtle) operator+=]?
                li Can we default some operators?
                li Stream operators #[:code(inline, subtle) operator&lt;&lt;()], #[:code(inline, subtle) operator&gt;&gt;()]?>
        section
          h1 operator+= and operator+
          include:code(compile="ct_plus_operator") code/ct_plus_operator.cpp
          .compiler-output
            pre#ct_plus_operator
        section
          h1 Does this break everything?
          :code
            struct Modulo {
              template<typename Lhs, typename Rhs>
              friend Modulo operator+(Lhs&& lhs, Rhs&& rhs) { ... }
            };
          blockquote
            | A name first declared in a friend declaration within a class or class template X becomes a member of the innermost enclosing namespace of X, but is not visible for lookup (except argument-dependent lookup that considers X) unless a matching declaration at namespace scope is provided [...].
            a.cite(
              href="https://en.cppreference.com/w/cpp/language/friend#Notes"
            ) cppreference.com/w/cpp/language/friend#Notes
          .fragment
            :code
              struct Modulo {
                template<typename Lhs, typename Rhs>
                requires (std::is_same_v<std::decay_t<Lhs>, Modulo> || std::is_same_v<std::decay_t<Rhs>, Modulo>)
                friend Modulo operator+(Lhs&& lhs, Rhs&& rhs) { ... }
              };
        section
          h1 operator*
          .row
            .col
              include:code(compile="ct_product_simple") code/ct_product_simple.cpp
            .col.compiler-col
              pre#ct_product_simple(data-assembly)
        section
          h1 Aside: compilers hate div
          h2 Example: 16-bit division by 5
          div To calculate #[:code(inline, subtle) x / 5]:
          ul
            li Multiply #[:code(inline, subtle) x] and #[:code(inline, subtle) (0011 0011 0011 0011)&#8322]
              :code
                1 / 5 == (0.0011 0011 0011...)&#8322;
            li The high 16-bit are the quotient #[:code(inline, subtle) q]
            li #[:code(inline, subtle) x - 5 * q] is the remainder
          .fragment
            br
            h3 In hardware:
            ul
              li x86: #[:code(inline, subtle) MUL] computes both low and high bits
              li ARM: #[:code(inline, subtle) MUL] computes low bits, #[:code(inline, subtle) UMULH] computes high bits
              li AVR: #[:code(inline, subtle) MUL] computes low bits, #[:code(inline, subtle) FMUL] computes high bits
        section
          h1 Aside: compilers hate div
          .row
            .col
              :code
                std::uint64_t volatile zero = 0;
                static void mul(benchmark::State& state) {
                  std::uint64_t lhs = zero;
                  std::uint64_t rhs = zero;
                  std::uint64_t constexpr modulus = 711;

                  for (auto _ : state) {
                    benchmark::DoNotOptimize(lhs * rhs % modulus);
                    ++lhs, ++rhs;
                  }
                }
            .col
              :code
                std::uint64_t volatile zero = 0;
                static void div(benchmark::State& state) {
                  std::uint64_t lhs = zero;
                  std::uint64_t rhs = zero;
                  std::uint64_t modulus = zero + 711;

                  for (auto _ : state) {
                    benchmark::DoNotOptimize(lhs * rhs % modulus);
                    ++lhs, ++rhs;
                  }
                }
          img(src="img/mul_div.png")
          .img(style="padding: 10px; font-size: 70%;")
            a(href="https://quick-bench.com/q/L9qY-KiBf6uFEu4D9n309qjRE9A") quick-bench.com
        section
          h1 operator*
          .row
            .col
              include:code(compile="ct_product") code/ct_product.cpp
            .col.compiler-col
              pre#ct_product(data-assembly)
        section
          h1 Table Of Content
          br
          br
          h2 Building a class for modular arithmetic
          .row
            .col
              ul 
                li Known modulus
                  ul
                    li member type
                    li #[:code(inline, subtle) operator==]
                    li #[:code(inline, subtle) operator+], #[:code(inline, subtle) operator+=]
                    li #[:code(inline, subtle) operator*]
            .col
              ul 
                li Unknown modulus
                  ul
                    li dependent types
                    li selecting the type
                    li optimizations
                    li powers
        section
          h1 Run-time modulus
          h2 What should #[:code(inline, subtle) Mod] be?
          :code
            // Something magical to get a Mod type
            auto a = Mod(3);
            a -= 2;
            auto b = 3 + a * 7
            a += a * b;
          ul
            li Could it dependent on requested modulus?
            li Should it store the modulus?
            li What should the value type be?
            li How do we choose it at runtime?
        section
          h1 Compile-time modulus
          .row
            .col
              br
              br
              include:code code/rt_modulo_impl.cpp
            .col
              h4 Known modulus
              :code
                template<std::uint64_t modulus_>
                struct CTModuloInfo {
                  using ValueType = [...];
                  static constexpr ValueType modulus = modulus_;
                };

                template<std::uint64_t modulus_>
                using Modulo = ModuloImpl<CTModuloInfo<modulus_>>;
              br
              h4 Unknown modulus
              :code
                template<typename VT>
                struct RTModuloInfo {
                  using ValueType = VT;
                  static ValueType modulus;
                };
        section
          h1 Aside: dependent type

          blockquote
            | In computer science and logic, a dependent type is a type whose definition depends on a value. It is an overlapping feature of type theory and type systems. [...]
            br
            | [A common example of dependent types are dependent functions.]
            | The return type of a dependent function may depend on the value (not just type) of one of its arguments.
            | For instance, a function that takes a positive integer #[:code(inline, subtle) n] may return an array of length #[:code(inline, subtle) n], where the array length is part of the type of the array.
            a.cite(
              href="https://en.wikipedia.org/wiki/Dependent_type"
            ) en.wikipedia.org/wiki/Dependent_type
          :code
            // Fictional example
            auto array_of_length(std::size_t n) -> std::array<double, n> {
              // ...
            }
        section
          h1 Aside: dependent type
          blockquote
            | In computer science and logic, a dependent type is a type whose definition depends on a value.
            a.cite(
              href="https://en.wikipedia.org/wiki/Dependent_type"
            ) en.wikipedia.org/wiki/Dependent_type

          br
          :code
            std::variant<int, double> v = get_a_variant_from_somewhere();

            std::visit([](auto&& arg) {
              std::cout << arg << std::endl;
            }, v);

          div The #[i value] of #[:code(inline, subtle) v] determines what the #[i type] of #[:code(inline, subtle) arg] will be.
        section 
          h1 Type dependent on modulus

          p Since C++20 we can write:

          :code
            modulo(17, []<typename Mod>() {
              auto a = Mod(3);
              a -= 8;
              std::cout << a.value << std::endl;
            });

          p or

          :code
            int modulus;
            std::cin >> modulus;
            bool is_special = modulo(modulus, []<typename Mod>() {
              auto a = Mod(3);
              a -= 8 * a;
              return a == -1;
            });
          br
          div But, what happens in #[:code(inline, subtle) modulo(std::uint64_t modulus, auto lambda)]?
        section 
          h1 Selecting the correct type
          .row
            .col
              br
              br
              include:code code/rt_modulo_impl.cpp
            .col
              include:code(compile="rt_modulo_select") code/rt_modulo_select.cpp
          .compiler-output
            pre#rt_modulo_select
        section
          h1 Optimizing the constructor
          .row
            .col
              include:code(compile="rt_constructor") code/rt_constructor.cpp
            .col.compiler-col
              pre#rt_constructor(data-assembly)

        section
          h1 Optimizing the operator*
          .row
            .col
              h2 Simple
              ul
                li Use #[:code(inline, subtle) div]
                li If needed use #[:code(inline, subtle) __uint128_t]
            .col
              h2 Balanced
              ul
                li Use #[:code(inline, subtle) div]
                li Avoid #[:code(inline, subtle) __uint128_t]
                li Compute #[:code(inline, subtle) 2**64 % modulus] once
              :code
                m64 = (~0ull)%modulus + 1; // only once

                // msvc: _umul128
                // gcc: __uint128_t
                std::tie(result, high) = mul(lhs, rhs);
                while(high >= 0) {
                  std::tie(low, high) = mul(high, m64);
                  // msvc: _addcarry_u64
                  if(__builtin_add_overflow(
                    result, low, &result
                  )) ++high;
                }
                result %= modulus;
            .col
              h2 Performant
              ul
                li Compute magic numbers once
                li Always avoid #[:code(inline, subtle) div]

        section
          h1 Taking powers
          .row 
            .col
              :code(compile="rt_pow")
                #include "mod/modulo.h"
                #include <iostream>

                template<typename Int, typename Exp>
                Int pow(Int i, Exp e) {
                  Int result = 1;
                  while(e) {
                    if(e % 2 == 1) result *= i;
                    i *= i;
                    e /= 2;
                  }
                  return result;
                } 

                int main() {
                  for(int mod = 3; mod < 20; mod += 2)
                    modulo(mod, [&]<typename Mod>() {
                      auto a = Mod(3);
                      std::cout << a.value << "**8 = " << pow(a, 8).value
                                << " (mod " << mod <<")" << std::endl;
                    });
                }
            .col.compiler-col
              pre#rt_pow(data-output data-execute)
        section
          h1 Conclussions
          br
          br
          br
          .cloud.large-cloud
            .word operator precedence
            .word #[:code(inline, subtle) std::visit]
            .word casting integers
            .word concepts
            .word comparing integers
            .word #[:code(inline, subtle) __uint128_t]
            .word value categories
            .word argument-dependent lookup
            .word #[:code(inline, subtle) MUL], #[:code(inline, subtle) UMULH], #[:code(inline, subtle) FMUL]
            .word fixed-point arithmetic
            .word micro bechmarking
            .word dependent types
            .word
              :code(inline, subtle) [[assume(...)]]
          div(style="position:absolute; left:20px; bottom:20px; text-align: left; font-size:80%;")
            | Toon Baeyens
            br
            a(href="mailto:toon.baeyens@gmail.com") toon.baeyens@gmail.com
    script(src="index.js" type="module")
